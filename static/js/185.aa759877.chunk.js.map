{"version":3,"file":"static/js/185.aa759877.chunk.js","mappings":"4QACA,EAAmC,iDAAnC,EAAoG,8CAApG,EAAmK,+CAAnK,EAAkO,8CAAlO,EAA+R,6CAA/R,EAAkW,oD,SCS5VA,EAAW,CACf,CACEC,KAAM,OACNC,KAAM,QAER,CACED,KAAM,gBACNC,KAAM,YAER,CACED,KAAM,aACNC,KAAM,eAIJC,EAAe,CACnB,CACEF,KAAM,eACNC,KAAM,aAER,CACED,KAAM,SACNC,KAAM,QA2CV,EAvC6B,WAC3B,IAAME,GAAaC,EAAAA,EAAAA,IAAYC,EAAAA,IAE/B,OACE,iBAAKC,UAAWC,EAAhB,WACE,gBAAID,UAAWC,EAAf,WACE,gBAAKD,UAAWC,EAAhB,SACGR,EAASS,KAAI,SAAAC,GAAK,OACjB,eAAIH,UAAWC,EAAf,UACE,SAAC,KAAD,CACED,UAAWC,EACXG,GAAI,YAAcD,EAAMR,KACxBU,KAAMF,EAAMR,KAHd,SAKGQ,EAAMT,SAN4BY,EAAAA,EAAAA,MADtB,OAYrB,gBAAKN,UAAWC,EAAhB,SACGJ,GACCD,EAAaM,KAAI,SAAAC,GAAK,OACpB,eAAIH,UAAWC,EAAf,UACE,SAAC,KAAD,CACED,UAAWC,EACXG,GAAI,YAAcD,EAAMR,KACxBU,KAAMF,EAAMR,KAHd,SAKGQ,EAAMT,SAN4BY,EAAAA,EAAAA,MADnB,UAa5B,SAACC,EAAA,EAAD,MAGL,E,mBC1CD,EAtBoB,WAClB,IAAMC,GAAWC,EAAAA,EAAAA,MACTC,GAAiBC,EAAAA,EAAAA,MAAjBD,aAQR,OANAE,EAAAA,EAAAA,YAAU,WACHF,GACHF,EAAS,gBAEZ,GAAE,CAACE,EAAcF,KAGhB,4BACE,SAACK,EAAA,EAAD,KACA,SAAC,EAAD,KAEA,SAAC,IAAD,KACA,SAACC,EAAA,EAAD,MAIL,C,qEC5BD,EAAsB,yBAAtB,EAAsD,0B,mBCetD,EAXkB,WAChB,OACE,UAAC,KAAD,CAAMd,UAAWC,EAASG,GAAG,WAA7B,qBAEE,gBAAKW,MAAM,OAAOC,OAAO,OAAOhB,UAAWC,EAA3C,UACE,gBAAKgB,KAAMC,EAAAA,EAAS,cAI3B,C,wDCbM,IAkBIZ,EAAS,eAACa,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["webpack://your-pet-project-frontend/./src/modules/NoticesCategoriesNav/notices-categories-nav.module.css?b99b","modules/NoticesCategoriesNav/NoticesCategoriesNav.jsx","pages/NoticesPage/NoticesPage.jsx","webpack://your-pet-project-frontend/./src/shared/components/AddPetBtn/add-pet-btn.module.css?6774","shared/components/AddPetBtn/AddPetBtn.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"category_wrapper\":\"notices-categories-nav_category_wrapper__zL4uQ\",\"category_list\":\"notices-categories-nav_category_list__h5-kf\",\"category_links\":\"notices-categories-nav_category_links__-Q8p4\",\"category_item\":\"notices-categories-nav_category_item__JgYHM\",\"category_btn\":\"notices-categories-nav_category_btn__QUVki\",\"category_auth_links\":\"notices-categories-nav_category_auth_links__3Se8G\"};","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { nanoid } from 'nanoid';\nimport { useSelector } from 'react-redux';\nimport { isUserLogin } from '../../redux/auth/auth-selectors';\n\nimport AddPetBtn from '../../shared/components/AddPetBtn';\n\nimport css from './notices-categories-nav.module.css';\n\nconst category = [\n  {\n    text: 'sell',\n    link: 'sell',\n  },\n  {\n    text: 'in good hands',\n    link: 'for-free',\n  },\n  {\n    text: 'lost/found',\n    link: 'lost-found',\n  },\n];\n\nconst authCategory = [\n  {\n    text: 'favorite ads',\n    link: 'favorites',\n  },\n  {\n    text: 'my ads',\n    link: 'own',\n  },\n];\n\nconst NoticesCategoriesNav = () => {\n  const isLoggedIn = useSelector(isUserLogin);\n\n  return (\n    <div className={css.category_wrapper}>\n      <ul className={css.category_list}>\n        <div className={css.category_links}>\n          {category.map(value => (\n            <li className={css.category_item} key={nanoid()}>\n              <NavLink\n                className={css.category_btn}\n                to={'/notices/' + value.link}\n                name={value.link}\n              >\n                {value.text}\n              </NavLink>\n            </li>\n          ))}\n        </div>\n        <div className={css.category_auth_links}>\n          {isLoggedIn &&\n            authCategory.map(value => (\n              <li className={css.category_item} key={nanoid()}>\n                <NavLink\n                  className={css.category_btn}\n                  to={'/notices/' + value.link}\n                  name={value.link}\n                >\n                  {value.text}\n                </NavLink>\n              </li>\n            ))}\n        </div>\n      </ul>\n      <AddPetBtn />\n    </div>\n  );\n};\n\nexport default NoticesCategoriesNav;\n","import React, { useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\n\nimport NoticesSearch from '../../shared/components/NoticesSearch/NoticesSearch';\nimport NoticesCategoriesNav from '../../modules/NoticesCategoriesNav/NoticesCategoriesNav';\n// import NoticesFilters from '../../modules/NoticesFilters/NoticesFilters';\nimport NoticesCategoriesList from '../../modules/NoticesCategoryList/NoticesCategoryList';\n// import AddPetBtn from 'shared/components/AddPetBtn';\nimport ModalAdv from 'modules/ModalAdv/ModalAdv';\nconst NoticesPage = () => {\n  const navigate = useNavigate();\n  const { categoryName } = useParams();\n\n  useEffect(() => {\n    if (!categoryName) {\n      navigate('/notices/sell');\n    }\n  }, [categoryName, navigate]);\n\n  return (\n    <div>\n      <NoticesSearch />\n      <NoticesCategoriesNav />\n      {/* <AddPetBtn /> */}\n      <NoticesCategoriesList />\n      <ModalAdv/>\n      {/* <NoticesFilters /> */}\n    </div>\n  );\n};\n\nexport default NoticesPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"Btn\":\"add-pet-btn_Btn__l-mXc\",\"icon\":\"add-pet-btn_icon__HnUFj\"};","import { Link } from 'react-router-dom';\n\nimport css from './add-pet-btn.module.css';\nimport sprite from '../../../images/icons/sprite.svg';\n\nconst AddPetBtn = () => {\n  return (\n    <Link className={css.Btn} to=\"/add-pet\">\n      Add Pet\n      <svg width=\"24px\" height=\"24px\" className={css.icon}>\n        <use href={sprite + '#plus'}></use>\n      </svg>\n    </Link>\n  );\n};\n\nexport default AddPetBtn;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["category","text","link","authCategory","isLoggedIn","useSelector","isUserLogin","className","css","map","value","to","name","nanoid","AddPetBtn","navigate","useNavigate","categoryName","useParams","useEffect","NoticesSearch","ModalAdv","width","height","href","sprite","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase"],"sourceRoot":""}